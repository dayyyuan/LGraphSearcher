package edu.psu.chemxseer.structure.supersearch.experiments;

import java.io.File;
import java.io.IOException;
import java.text.ParseException;

import org.apache.lucene.index.CorruptIndexException;
import org.apache.lucene.store.LockObtainFailedException;

import edu.psu.chemxseer.structure.postings.Impl.GraphDatabase_InMem;
import edu.psu.chemxseer.structure.postings.Impl.GraphDatabase_OnDisk;
import edu.psu.chemxseer.structure.postings.Interface.IGraphDatabase;
import edu.psu.chemxseer.structure.preprocess.MalwareParser;
import edu.psu.chemxseer.structure.preprocess.MyFactory;
import edu.psu.chemxseer.structure.preprocess.RandomChoseDBGraph;
import edu.psu.chemxseer.structure.subsearch.Impl.indexfeature.FeatureProcessorFG;
import edu.psu.chemxseer.structure.subsearch.Impl.indexfeature.PostingFeatures;
import edu.psu.chemxseer.structure.supersearch.CIndex.CIndexExp;
import edu.psu.chemxseer.structure.supersearch.GPTree.GPTreeExp;
import edu.psu.chemxseer.structure.supersearch.LWFull.LWIndexExcExp;
import edu.psu.chemxseer.structure.supersearch.PrefIndex.PrefixIndexExp;

/**
 * Experiment added to the VLDB second chance review: Run all experiment with
 * the malware-dataset
 * 
 * @author dayuyuan
 * 
 */
public class VLDB2Exp_Malware {
	/**
	 * The experiment studieds the database graphs mined with different minimum
	 * support However, the minimum support for the index feature is fixed at
	 * 0.01
	 * 
	 * @param args
	 * @throws CorruptIndexException
	 * @throws LockObtainFailedException
	 * @throws IOException
	 * @throws ParseException
	 */
	public static void main(String[] args) throws CorruptIndexException,
			LockObtainFailedException, IOException, ParseException {
		String name = "/data/home/duy113/SupSearchExp/MalWare/";
		double[] querySupports = new double[] { 0.1, 0.05 };
		String rawQueryName = name + "malware/";
		String rawQueryDB = name + "QueryFile";
		MalwareParser.convertFormat(rawQueryName, rawQueryDB);

		String trainQueryName = name + "TrainQuery";
		String testQueryName = name + "TestQuery";
		RandomChoseDBGraph.randomlySplitDBGraph(new GraphDatabase_OnDisk(
				rawQueryDB, MyFactory.getUnCanDFS()), 2000, trainQueryName,
				testQueryName);
		IGraphDatabase trainQuery = new GraphDatabase_OnDisk(trainQueryName,
				MyFactory.getUnCanDFS());
		IGraphDatabase testQuery = new GraphDatabase_OnDisk(testQueryName,
				MyFactory.getUnCanDFS());
		// 2000 training, the rests (roughly 600) testing

		for (int i = 0; i < 2; i++) {
			String dirName = name + i + "/";
			File temp = new File(dirName);
			if (!temp.exists())
				temp.mkdirs();

			String dbFileName = dirName + "DBFile";
			PostingFeatures dbFeatures = FeatureProcessorFG
					.frequentSubgraphMining(rawQueryDB, dbFileName + "raw",
							null, querySupports[i], 20, MyFactory.getUnCanDFS());
			IGraphDatabase gDB = new GraphDatabase_InMem(
					dbFeatures.getFeatures());
			RandomChoseDBGraph.randomlyChooseDBGraph(gDB,
					Math.min(10000, gDB.getTotalNum()), dbFileName);
			dbFeatures = null;
			System.gc();

			double minSupt = 0.01; // minimum support
			String baseName = dirName + "MinSup_" + minSupt + "/";
			temp = new File(baseName);
			if (!temp.exists())
				temp.mkdirs();

			gDB = new GraphDatabase_OnDisk(dbFileName, MyFactory.getUnCanDFS());
			int[] featureCount = new int[1];
			System.out.println(baseName + "LWIndexExclusive");
			LWIndexExcExp.buildIndexWithFeatureMining(gDB, trainQuery, gDB,
					MyFactory.getUnCanDFS(), baseName + "LWIndexExc/", minSupt,
					0, featureCount);
			LWIndexExcExp.runIndex(gDB, testQuery, baseName + "LWIndexExc/",
					true);

			System.out.println(baseName + "PrefixIndexHi");
			PrefixIndexExp.buildHiIndex(gDB, gDB, 2, baseName, minSupt);
			System.gc();
			PrefixIndexExp.runHiIndex(gDB, testQuery, baseName, true);

			System.out.println(baseName + "GPTree");
			GPTreeExp.buildIndex(gDB, gDB, baseName, minSupt);
			System.gc();
			GPTreeExp.runIndex(gDB, testQuery, baseName, true);

			System.out.println(baseName + "CIndexTopDown: ");
			CIndexExp.buildIndexTopDown(gDB, trainQuery, gDB,
					MyFactory.getUnCanDFS(), baseName, minSupt, 100);
			CIndexExp.runIndexTopDown(gDB, testQuery, MyFactory.getUnCanDFS(),
					baseName, true);

		}
	}
}
